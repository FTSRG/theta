var flag0 : bool
var flag1 : bool
var turn : int

var cnt : bool

var start : synthetic
var end : synthetic

main process mainProcess{

	main procedure mainProcedure(){
		init loc Li
		loc L0
		loc L1
		final loc Lf

		Li -> L0 {
			call initProcedure()
		}
		
		L0 -> L1 {
			call startThreads()
		}
		
		L1 -> Lf {
			wait(end)
		}
	}

	procedure initProcedure(){
		init  loc Li
		final loc Lf

		Li -> Lf{
			flag0 := false
			flag1 := false
			turn  := 0
			cnt := false
		}
	}

	procedure startThreads(){
		init  loc Li
		final loc Lf

		Li -> Lf{
			notifyAll(start)
		}
	}
}

process thread0{
	main procedure peterson(){
		init  loc Li
		loc L0
		loc L1
		loc L2
		loc L3
		loc L4
		final loc Lf
		error loc Le

		Li -> L0 {
			wait(start)
			flag0 := true
			turn := 1
		}

		L0 -> L0 {
			assume (flag1 and turn = 1)
		}

		L0 -> L1 {
			assume not (flag1 and turn = 1)
		}

		L1 -> Le {
			assume (cnt)
		}

		L1 -> L2 {
			assume not (cnt)
		}

		L2 -> L3 {
			cnt := true
		}

		L3 -> L4 {
			cnt := false
		}

		L4 -> Lf {
			flag0 := false
		}

	}
}

process thread1{
	main procedure peterson(){
		init  loc Li
		loc L0
		loc L1
		loc L2
		loc L3
		loc L4
		final loc Lf
		error loc Le

		Li -> L0 {
			wait(start)
			flag1 := true
			turn := 1
		}

		L0 -> L0 {
			assume (flag0 and turn = 0)
		}

		L0 -> L1 {
			assume not (flag0 and turn = 0)
		}

		L1 -> Le {
			assume (cnt)
		}

		L1 -> L2 {
			assume not (cnt)
		}

		L2 -> L3 {
			cnt := true
		}

		L3 -> L4 {
			cnt := false
		}

		L4 -> Lf {
			flag1 := false
		}

	}
}
