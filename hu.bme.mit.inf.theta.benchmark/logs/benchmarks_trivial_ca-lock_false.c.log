Executing pass 'ConstantPropagation' on function 'main'
Executing pass 'DeadBranchElimination' on function 'main'
Executing pass 'LoopUnroll' on function 'main'

----------DEBUG DUMP of Optimizer.----------
-----main-----
digraph G {
node_entry [label="entry\n"];
node_entry -> node_code_entry;
node_code_entry [label="Assign(Var(lock, Int), 0)\nAssign(Var(tmp_0, Int), Call(nondet_int))\nAssign(Var(pv, Int), tmp_0)\nBranch(Eq(Mod(pv, 2), 0), then, merge)\n"];
node_code_entry -> node_then [label=" True"];
node_code_entry -> node_merge [label=" False"];
node_merge [label="Assert(Neq(lock, 0))\nGoto(main_exit)\n"];
node_merge -> node_main_exit;
node_then [label="Assign(Var(lock, Int), 0)\nGoto(merge)\n"];
node_then -> node_merge;
node_main_exit [label="exit\n"];
}

Found 1 slices.

----------CFA SLICES----------
digraph cfa {
edge [fontname = "courier"]
begin
0
end
1
2
3
error [peripheries=2]
4
4 -> 2[label="\
Assume(Not(Eq(Mod(pv, 2), 0)))\n\
"]
2 -> end[label="\
Assume(Neq(lock, 0))\n\
"]
begin -> 1[label="\
Assign(lock, 0)\n\
"]
0 -> 2[label="\
Assign(lock, 0)\n\
"]
1 -> 3[label="\
Havoc(tmp_0)\n\
"]
4 -> 0[label="\
Assume(Eq(Mod(pv, 2), 0))\n\
"]
3 -> 4[label="\
Assign(pv, tmp_0)\n\
"]
2 -> error[label="\
Assume(Not(Neq(lock, 0)))\n\
"]
}
Found an error path with length of 5
Clause: Eq(_lock_1, 0)
Clause: Eq(_pv_1, _tmp_0_1)
Clause: Not(Eq(Mod(_pv_1, 2), 0))
Clause: Not(Neq(_lock_1, 0))
Check FAILED, system model:
   Model(_lock_1 <- 0, _pv_1 <- -1, _tmp_0_1 <- -1)
