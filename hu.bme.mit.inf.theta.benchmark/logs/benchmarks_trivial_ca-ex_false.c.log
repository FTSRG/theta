Executing pass 'ConstantPropagation' on function 'main'
Executing pass 'DeadBranchElimination' on function 'main'
Executing pass 'LoopUnroll' on function 'main'

----------DEBUG DUMP of Optimizer.----------
-----main-----
digraph G {
node_entry [label="entry\n"];
node_entry -> node_code_entry;
node_code_entry [label="Assign(Var(tmp_0, Int), Call(nondet_int))\nAssign(Var(x, Int), tmp_0)\nAssign(Var(i, Int), 0)\nAssign(Var(sum, Int), 0)\nAssert(Gt(x, 0))\nGoto(loop_cpy194)\n"];
node_code_entry -> node_loop_cpy194;
node_loop [label="Branch(Lt(i, x), body, end)\n"];
node_loop -> node_body [label=" True"];
node_loop -> node_end [label=" False"];
node_body [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop)\n"];
node_body -> node_loop;
node_end [label="Assert(Eq(sum, 0))\nAssert(Eq(i, 0))\nReturn(0)\n"];
node_end -> node_main_exit;
node_main_exit [label="exit\n"];
node_body_cpy193 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy196)\n"];
node_body_cpy193 -> node_loop_cpy196;
node_loop_cpy194 [label="Branch(Lt(i, x), body_cpy193, end)\n"];
node_loop_cpy194 -> node_body_cpy193 [label=" True"];
node_loop_cpy194 -> node_end [label=" False"];
node_body_cpy195 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy198)\n"];
node_body_cpy195 -> node_loop_cpy198;
node_loop_cpy196 [label="Branch(Lt(i, x), body_cpy195, end)\n"];
node_loop_cpy196 -> node_body_cpy195 [label=" True"];
node_loop_cpy196 -> node_end [label=" False"];
node_body_cpy197 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy200)\n"];
node_body_cpy197 -> node_loop_cpy200;
node_loop_cpy198 [label="Branch(Lt(i, x), body_cpy197, end)\n"];
node_loop_cpy198 -> node_body_cpy197 [label=" True"];
node_loop_cpy198 -> node_end [label=" False"];
node_body_cpy199 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy202)\n"];
node_body_cpy199 -> node_loop_cpy202;
node_loop_cpy200 [label="Branch(Lt(i, x), body_cpy199, end)\n"];
node_loop_cpy200 -> node_body_cpy199 [label=" True"];
node_loop_cpy200 -> node_end [label=" False"];
node_body_cpy201 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy204)\n"];
node_body_cpy201 -> node_loop_cpy204;
node_loop_cpy202 [label="Branch(Lt(i, x), body_cpy201, end)\n"];
node_loop_cpy202 -> node_body_cpy201 [label=" True"];
node_loop_cpy202 -> node_end [label=" False"];
node_body_cpy203 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy206)\n"];
node_body_cpy203 -> node_loop_cpy206;
node_loop_cpy204 [label="Branch(Lt(i, x), body_cpy203, end)\n"];
node_loop_cpy204 -> node_body_cpy203 [label=" True"];
node_loop_cpy204 -> node_end [label=" False"];
node_body_cpy205 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy208)\n"];
node_body_cpy205 -> node_loop_cpy208;
node_loop_cpy206 [label="Branch(Lt(i, x), body_cpy205, end)\n"];
node_loop_cpy206 -> node_body_cpy205 [label=" True"];
node_loop_cpy206 -> node_end [label=" False"];
node_body_cpy207 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy210)\n"];
node_body_cpy207 -> node_loop_cpy210;
node_loop_cpy208 [label="Branch(Lt(i, x), body_cpy207, end)\n"];
node_loop_cpy208 -> node_body_cpy207 [label=" True"];
node_loop_cpy208 -> node_end [label=" False"];
node_body_cpy209 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop_cpy212)\n"];
node_body_cpy209 -> node_loop_cpy212;
node_loop_cpy210 [label="Branch(Lt(i, x), body_cpy209, end)\n"];
node_loop_cpy210 -> node_body_cpy209 [label=" True"];
node_loop_cpy210 -> node_end [label=" False"];
node_body_cpy211 [label="Assign(Var(sum, Int), Add(sum, i))\nAssign(Var(i, Int), Add(i, 1))\nGoto(loop)\n"];
node_body_cpy211 -> node_loop;
node_loop_cpy212 [label="Branch(Lt(i, x), body_cpy211, end)\n"];
node_loop_cpy212 -> node_body_cpy211 [label=" True"];
node_loop_cpy212 -> node_end [label=" False"];
}

Found 3 slices.

----------CFA SLICES----------
digraph cfa {
edge [fontname = "courier"]
0
error [peripheries=2]
begin
1
end
1 -> end[label="\
Assume(Gt(x, 0))\n\
"]
0 -> 1[label="\
Assign(x, tmp_0)\n\
"]
1 -> error[label="\
Assume(Not(Gt(x, 0)))\n\
"]
begin -> 0[label="\
Havoc(tmp_0)\n\
"]
}

----------CFA SLICES----------
digraph cfa {
edge [fontname = "courier"]
0
1
2
3
4
5
6
7
8
9
10
11
12
begin
13
14
15
16
17
18
19
20
21
end
error [peripheries=2]
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
12 -> 13[label="\
Assume(Lt(i, x))\n\
"]
14 -> 10[label="\
Assign(sum, Add(sum, i))\n\
"]
2 -> 18[label="\
Assign(sum, 0)\n\
"]
23 -> 34[label="\
Assign(i, Add(i, 1))\n\
"]
8 -> 31[label="\
Assign(sum, Add(sum, i))\n\
"]
20 -> 9[label="\
Assign(sum, Add(sum, i))\n\
"]
30 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
10 -> 15[label="\
Assign(i, Add(i, 1))\n\
"]
33 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
35 -> 8[label="\
Assume(Lt(i, x))\n\
"]
0 -> end[label="\
Assume(Eq(sum, 0))\n\
"]
4 -> 14[label="\
Assume(Lt(i, x))\n\
"]
begin -> 29[label="\
Havoc(tmp_0)\n\
"]
5 -> 2[label="\
Assign(i, 0)\n\
"]
27 -> 7[label="\
Assign(sum, Add(sum, i))\n\
"]
15 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
25 -> 21[label="\
Assign(sum, Add(sum, i))\n\
"]
32 -> 26[label="\
Assume(Lt(i, x))\n\
"]
4 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
24 -> 28[label="\
Assign(sum, Add(sum, i))\n\
"]
26 -> 23[label="\
Assign(sum, Add(sum, i))\n\
"]
9 -> 4[label="\
Assign(i, Add(i, 1))\n\
"]
34 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
28 -> 30[label="\
Assign(i, Add(i, 1))\n\
"]
18 -> 24[label="\
Assume(Lt(i, x))\n\
"]
33 -> 25[label="\
Assume(Lt(i, x))\n\
"]
7 -> 12[label="\
Assign(i, Add(i, 1))\n\
"]
17 -> 27[label="\
Assume(Lt(i, x))\n\
"]
11 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
36 -> 11[label="\
Assign(i, Add(i, 1))\n\
"]
1 -> 3[label="\
Assign(sum, Add(sum, i))\n\
"]
15 -> 16[label="\
Assume(Lt(i, x))\n\
"]
35 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
17 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
22 -> 11[label="\
Assign(i, Add(i, 1))\n\
"]
29 -> 5[label="\
Assign(x, tmp_0)\n\
"]
30 -> 1[label="\
Assume(Lt(i, x))\n\
"]
11 -> 19[label="\
Assume(Lt(i, x))\n\
"]
6 -> 35[label="\
Assign(i, Add(i, 1))\n\
"]
16 -> 22[label="\
Assign(sum, Add(sum, i))\n\
"]
21 -> 17[label="\
Assign(i, Add(i, 1))\n\
"]
0 -> error[label="\
Assume(Not(Eq(sum, 0)))\n\
"]
34 -> 20[label="\
Assume(Lt(i, x))\n\
"]
3 -> 33[label="\
Assign(i, Add(i, 1))\n\
"]
32 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
18 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
12 -> 0[label="\
Assume(Not(Lt(i, x)))\n\
"]
19 -> 36[label="\
Assign(sum, Add(sum, i))\n\
"]
13 -> 6[label="\
Assign(sum, Add(sum, i))\n\
"]
31 -> 32[label="\
Assign(i, Add(i, 1))\n\
"]
}

----------CFA SLICES----------
digraph cfa {
edge [fontname = "courier"]
0
1
2
3
4
5
6
end
7
8
9
10
11
12
13
14
begin
15
16
17
18
19
error [peripheries=2]
20
21
22
23
24
18 -> 16[label="\
Assume(Lt(i, x))\n\
"]
7 -> error[label="\
Assume(Not(Eq(i, 0)))\n\
"]
6 -> 22[label="\
Assign(i, Add(i, 1))\n\
"]
21 -> 15[label="\
Assign(i, 0)\n\
"]
15 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
22 -> 10[label="\
Assume(Lt(i, x))\n\
"]
5 -> 12[label="\
Assume(Lt(i, x))\n\
"]
11 -> 14[label="\
Assume(Lt(i, x))\n\
"]
19 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
3 -> 19[label="\
Assign(i, Add(i, 1))\n\
"]
12 -> 5[label="\
Assign(i, Add(i, 1))\n\
"]
11 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
0 -> 21[label="\
Assign(x, tmp_0)\n\
"]
22 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
begin -> 0[label="\
Havoc(tmp_0)\n\
"]
13 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
17 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
17 -> 1[label="\
Assume(Lt(i, x))\n\
"]
2 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
16 -> 13[label="\
Assign(i, Add(i, 1))\n\
"]
7 -> end[label="\
Assume(Eq(i, 0))\n\
"]
24 -> 17[label="\
Assign(i, Add(i, 1))\n\
"]
10 -> 2[label="\
Assign(i, Add(i, 1))\n\
"]
20 -> 8[label="\
Assign(i, Add(i, 1))\n\
"]
2 -> 23[label="\
Assume(Lt(i, x))\n\
"]
8 -> 6[label="\
Assume(Lt(i, x))\n\
"]
8 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
14 -> 18[label="\
Assign(i, Add(i, 1))\n\
"]
5 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
9 -> 20[label="\
Assume(Lt(i, x))\n\
"]
13 -> 3[label="\
Assume(Lt(i, x))\n\
"]
15 -> 24[label="\
Assume(Lt(i, x))\n\
"]
4 -> 5[label="\
Assign(i, Add(i, 1))\n\
"]
9 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
1 -> 9[label="\
Assign(i, Add(i, 1))\n\
"]
23 -> 11[label="\
Assign(i, Add(i, 1))\n\
"]
19 -> 4[label="\
Assume(Lt(i, x))\n\
"]
18 -> 7[label="\
Assume(Not(Lt(i, x)))\n\
"]
}
Found an error path with length of 3
Clause: Eq(_x_1, _tmp_0_1)
Clause: Not(Gt(_x_1, 0))
Check FAILED, system model:
   Model(_x_1 <- 0, _tmp_0_1 <- 0)
