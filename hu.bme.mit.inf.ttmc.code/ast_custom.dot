digraph G {node_0 [label="TranslationUnitAst"];
node_1 [label="FunctionDefinitionAst"];
node_2 [label="DeclarationSpecifierAst"];
node_1 -> node_2;
node_3 [label="FunctionDeclaratorAst"];
node_1 -> node_3;
node_4 [label="CompoundStatementAst"];
node_5 [label="DeclarationStatementAst"];
node_6 [label="VarDeclarationAst"];
node_7 [label="DeclarationSpecifierAst"];
node_6 -> node_7;
node_8 [label="InitDeclaratorAst"];
node_9 [label="AssignmentInitializerAst"];
node_10 [label="LiteralExpressionAst"];
node_9 -> node_10;
node_8 -> node_9;
node_6 -> node_8;
node_5 -> node_6;
node_4 -> node_5;
node_11 [label="DeclarationStatementAst"];
node_12 [label="VarDeclarationAst"];
node_13 [label="DeclarationSpecifierAst"];
node_12 -> node_13;
node_14 [label="InitDeclaratorAst"];
node_15 [label="AssignmentInitializerAst"];
node_16 [label="LiteralExpressionAst"];
node_15 -> node_16;
node_14 -> node_15;
node_12 -> node_14;
node_11 -> node_12;
node_4 -> node_11;
node_17 [label="WhileStatementAst"];
node_18 [label="BinaryExpressionAst"];
node_19 [label="NameExpressionAst"];
node_18 -> node_19;
node_20 [label="LiteralExpressionAst"];
node_18 -> node_20;
node_17 -> node_18;
node_21 [label="CompoundStatementAst"];
node_22 [label="ExpressionStatementAst"];
node_23 [label="BinaryExpressionAst"];
node_24 [label="NameExpressionAst"];
node_23 -> node_24;
node_25 [label="BinaryExpressionAst"];
node_26 [label="NameExpressionAst"];
node_25 -> node_26;
node_27 [label="NameExpressionAst"];
node_25 -> node_27;
node_23 -> node_25;
node_22 -> node_23;
node_21 -> node_22;
node_28 [label="ExpressionStatementAst"];
node_29 [label="BinaryExpressionAst"];
node_30 [label="NameExpressionAst"];
node_29 -> node_30;
node_31 [label="BinaryExpressionAst"];
node_32 [label="NameExpressionAst"];
node_31 -> node_32;
node_33 [label="LiteralExpressionAst"];
node_31 -> node_33;
node_29 -> node_31;
node_28 -> node_29;
node_21 -> node_28;
node_17 -> node_21;
node_4 -> node_17;
node_34 [label="ExpressionStatementAst"];
node_35 [label="FunctionCallExpressionAst"];
node_36 [label="BinaryExpressionAst"];
node_37 [label="NameExpressionAst"];
node_36 -> node_37;
node_38 [label="LiteralExpressionAst"];
node_36 -> node_38;
node_35 -> node_36;
node_34 -> node_35;
node_4 -> node_34;
node_39 [label="ReturnStatementAst"];
node_40 [label="LiteralExpressionAst"];
node_39 -> node_40;
node_4 -> node_39;
node_1 -> node_4;
node_0 -> node_1;
}