specification FDDI(n : int, ttrt : int, sa : int) {
	var t : clock
	var id : int
	
//	automaton ring(n : int) := {
//		var t : clock
//		var id : int
//		
//		init loc wait { t <= td }
//		loc sent {}
//		
//		wait -> sent ! TT[id] {
//			assume t >= td
//		}
//		
//		sent -> wait ? RT[id] {
//			t := 0;
//			id := id mod n + 1
//		}
//	}

	automaton station(ref trt : clock, ref xa : clock, ref xb : clock, i: int) := {		
		init loc q0
		loc q1 { trt <= sa }
		loc q2 { trt <= sa }
		loc q3 { xa <= ttrt + sa }
		loc q4
		loc q5 { trt <= sa }
		loc q6 { trt <= sa }
		loc q7 { xb <= ttrt + sa }
		
		q0 -> q1 {
			assume id = i;
			assume trt >= ttrt;
			trt := 0;
			xb := 0
		}
		
		q0 -> q2 {
			assume id = i;
			assume trt < ttrt;
			trt := 0;
			xb := 0
		}
		
		q1 -> q4 {
			assume trt = sa;
			id := id mod n + 1
		}
		
		q2 -> q3 {
			assume trt = sa
		}
		
		q3 -> q4 {
			id := id mod n + 1
		}
		
		q4 -> q5 {
			assume id = i;
			assume trt >= ttrt;
			trt := 0;
			xa := 0
		}
		
		q4 -> q6 {
			assume id = i;
			assume trt < ttrt;
			trt := 0;
			xa := 0
		}
		
		q5 -> q0 {
			assume trt = sa;
			id := id mod n + 1
		}
		
		q6 -> q7 {
			assume trt = sa
		}
		
		q7 -> q0 {
			id := id mod n + 1
		}
	}
	
}